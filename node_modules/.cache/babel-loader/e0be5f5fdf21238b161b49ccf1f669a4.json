{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Downloads/abhirajOnefin/src/components/Toggle/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './index.css';\nimport { ImSwitch } from 'react-icons/im';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToggleTheme() {\n  _s();\n\n  const [toggleTheme, setToggleTheme] = useState(() => JSON.parse(localStorage.getItem(\"toggleTheme\")) || \"light\");\n  useEffect(() => {\n    localStorage.setItem(\"toggleTheme\", JSON.stringify(toggleTheme));\n    document.body.classList.add(toggleTheme); //* componentDidMount\n\n    return () => {\n      document.body.classList.remove(toggleTheme); //* componentWillUnmount\n      // document.body.classList.add(toggleTheme); //* componentWillUnmount\n      //? it used as cleanup,  (like removing event listeners, cancel the timer etc) and here we are removing the class the we added\n      //? after removing the class its going to check if there's a light class if so it add the dark theme\n\n      console.log(\"unmount\");\n    };\n  }, [toggleTheme]); //* will run every time the toggleThem change (update)\n\n  const classes = `${toggleTheme} App`;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: classes,\n    onClick: () => {\n      return toggleTheme === \"light\" ? setToggleTheme(\"dark\") : setToggleTheme(\"light\");\n    },\n    children: /*#__PURE__*/_jsxDEV(ImSwitch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToggleTheme, \"6Qs61O4wiu1/cbbv7jfTuXjLOh0=\");\n\n_c = ToggleTheme;\nexport default ToggleTheme;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleTheme\");","map":{"version":3,"sources":["/Users/apple/Downloads/abhirajOnefin/src/components/Toggle/index.js"],"names":["React","useState","useEffect","ImSwitch","ToggleTheme","toggleTheme","setToggleTheme","JSON","parse","localStorage","getItem","setItem","stringify","document","body","classList","add","remove","console","log","classes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,SAAQC,QAAR,QAAuB,gBAAvB;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACnB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAC1C,MAAMM,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,KAAmD,OADf,CAA9C;AAGER,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoCJ,IAAI,CAACK,SAAL,CAAeP,WAAf,CAApC;AACAQ,IAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4BX,WAA5B,EAFc,CAE4B;;AAC1C,WAAO,MAAM;AACXQ,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,MAAxB,CAA+BZ,WAA/B,EADW,CACkC;AAC7C;AACA;AAEA;;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAPD;AAQD,GAXQ,EAWN,CAACd,WAAD,CAXM,CAAT,CAJiB,CAeE;;AACnB,QAAMe,OAAO,GAAI,GAAEf,WAAY,MAA/B;AACA,sBACE;AACE,IAAA,SAAS,EAAEe,OADb;AAEE,IAAA,OAAO,EAAE,MAAM;AACb,aAAOf,WAAW,KAAK,OAAhB,GACHC,cAAc,CAAC,MAAD,CADX,GAEHA,cAAc,CAAC,OAAD,CAFlB;AAGD,KANH;AAAA,2BAQC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AARD;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA7BIF,W;;KAAAA,W;AA+BT,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './index.css';\nimport {ImSwitch} from 'react-icons/im';\n\nfunction ToggleTheme() {\n    const [toggleTheme, setToggleTheme] = useState(\n        () => JSON.parse(localStorage.getItem(\"toggleTheme\")) || \"light\"\n      );\n      useEffect(() => {\n        localStorage.setItem(\"toggleTheme\", JSON.stringify(toggleTheme));\n        document.body.classList.add(toggleTheme); //* componentDidMount\n        return () => {\n          document.body.classList.remove(toggleTheme); //* componentWillUnmount\n          // document.body.classList.add(toggleTheme); //* componentWillUnmount\n          //? it used as cleanup,  (like removing event listeners, cancel the timer etc) and here we are removing the class the we added\n    \n          //? after removing the class its going to check if there's a light class if so it add the dark theme\n          console.log(\"unmount\");\n        };\n      }, [toggleTheme]); //* will run every time the toggleThem change (update)\n      const classes = `${toggleTheme} App`;\n      return (\n        <button\n          className={classes}\n          onClick={() => {\n            return toggleTheme === \"light\"\n              ? setToggleTheme(\"dark\")\n              : setToggleTheme(\"light\");\n          }}\n        >\n         <ImSwitch/>\n        </button>\n      );\n    }\n\nexport default ToggleTheme"]},"metadata":{},"sourceType":"module"}